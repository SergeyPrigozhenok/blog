<?php
// database/migration.php - –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –ë–î

error_reporting(E_ALL);
ini_set('display_errors', 1);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã
require_once '../config/database.php';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è slug –∏–∑ —Å—Ç—Ä–æ–∫–∏
function createSlug($string) {
    $string = mb_strtolower($string, 'UTF-8');
    $string = preg_replace('/[^–∞-—è—ëa-z0-9\s-]/ui', '', $string);
    $string = preg_replace('/[\s-]+/', '-', $string);
    return trim($string, '-');
}

echo "<h2>üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ MySQL</h2>";

try {
    $pdo = getDatabaseConnection();
    if (!$pdo) {
        throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
    }
    
    echo "<p>‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</p>";
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    $pdo->beginTransaction();
    
    // 1. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    echo "<p>üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...</p>";
    $pdo->exec("SET FOREIGN_KEY_CHECKS = 0");
    $pdo->exec("TRUNCATE TABLE article_tags");
    $pdo->exec("TRUNCATE TABLE articles");
    $pdo->exec("TRUNCATE TABLE tags");
    $pdo->exec("TRUNCATE TABLE categories");
    $pdo->exec("TRUNCATE TABLE users");
    $pdo->exec("SET FOREIGN_KEY_CHECKS = 1");
    
    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    echo "<p>üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤...</p>";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    $dataPath = '../data/';
    $authorsFile = $dataPath . 'authors.json';
    $categoriesFile = $dataPath . 'categories.json';
    
    if (file_exists($authorsFile) && file_exists($categoriesFile)) {
        echo "<p>üìÅ –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...</p>";
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤
        $authorsData = json_decode(file_get_contents($authorsFile), true);
        $stmt = $pdo->prepare("INSERT INTO users (id, name, email, bio) VALUES (?, ?, ?, ?)");
        
        foreach ($authorsData as $id => $author) {
            $stmt->execute([
                $id,
                $author['name'],
                $author['email'],
                $author['bio'] ?? ''
            ]);
        }
        echo "<p>üë• –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–≤: " . count($authorsData) . "</p>";
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        $categoriesData = json_decode(file_get_contents($categoriesFile), true);
        $stmt = $pdo->prepare("INSERT INTO categories (id, name, slug) VALUES (?, ?, ?)");
        
        foreach ($categoriesData as $id => $categoryName) {
            $stmt->execute([
                $id,
                $categoryName,
                createSlug($categoryName)
            ]);
        }
        echo "<p>üìÅ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: " . count($categoriesData) . "</p>";
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∏–∑ –ø–∞–ø–∫–∏ articles
        $articlesPath = $dataPath . 'articles/';
        if (is_dir($articlesPath)) {
            $files = glob($articlesPath . '*.json');
            $stmtArticle = $pdo->prepare("
                INSERT INTO articles (id, title, slug, content, excerpt, author_id, category_id, reading_time, published_at) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ");
            
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è —Ç–µ–≥–æ–≤
            $stmtTag = $pdo->prepare("INSERT IGNORE INTO tags (name, slug) VALUES (?, ?)");
            $stmtGetTag = $pdo->prepare("SELECT id FROM tags WHERE name = ?");
            $stmtArticleTag = $pdo->prepare("INSERT INTO article_tags (article_id, tag_id) VALUES (?, ?)");
            
            foreach ($files as $file) {
                $articleId = (int) basename($file, '.json');
                $articleData = json_decode(file_get_contents($file), true);
                
                if ($articleData) {
                    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é
                    $stmtArticle->execute([
                        $articleId,
                        $articleData['title'],
                        createSlug($articleData['title']),
                        $articleData['content'],
                        $articleData['excerpt'],
                        $articleData['author_id'],
                        $articleData['category_id'],
                        $articleData['reading_time'],
                        $articleData['date']
                    ]);
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏
                    if (!empty($articleData['tags'])) {
                        foreach ($articleData['tags'] as $tagName) {
                            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                            $stmtTag->execute([$tagName, createSlug($tagName)]);
                            
                            // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–≥–∞
                            $stmtGetTag->execute([$tagName]);
                            $tagId = $stmtGetTag->fetchColumn();
                            
                            // –°–≤—è–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å—é —Å —Ç–µ–≥–æ–º
                            if ($tagId) {
                                $stmtArticleTag->execute([$articleId, $tagId]);
                            }
                        }
                    }
                }
            }
            echo "<p>üìö –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: " . count($files) . "</p>";
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
        $viewsFile = $dataPath . 'views.json';
        if (file_exists($viewsFile)) {
            $viewsData = json_decode(file_get_contents($viewsFile), true);
            $stmt = $pdo->prepare("UPDATE articles SET views = ? WHERE id = ?");
            
            foreach ($viewsData as $articleId => $views) {
                $stmt->execute([$views, $articleId]);
            }
            echo "<p>üëÅÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–µ–π</p>";
        }
    } else {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        echo "<p>‚ö†Ô∏è –§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...</p>";
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ structure.sql
        $testData = "
        INSERT INTO users (id, name, email, bio) VALUES
        (1, '–ê–Ω–Ω–∞ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'anna@blog.ru', 'Senior PHP —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å 8-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º'),
        (2, '–î–º–∏—Ç—Ä–∏–π –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', 'dmitry@blog.ru', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –∏ fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'),
        (3, '–ú–∞—Ä–∏—è –§—Ä–æ–Ω—Ç–µ–Ω–¥', 'maria@blog.ru', 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, UI/UX –¥–∏–∑–∞–π–Ω–µ—Ä');
        
        INSERT INTO categories (id, name, slug) VALUES
        (1, 'PHP –∏ Backend', 'php-backend'),
        (2, 'Frontend', 'frontend'),
        (3, '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'databases'),
        (4, 'DevOps', 'devops');
        
        INSERT INTO tags (name, slug) VALUES
        ('PHP', 'php'),
        ('Backend', 'backend'),
        ('API', 'api'),
        ('MySQL', 'mysql'),
        ('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', 'optimization'),
        ('JavaScript', 'javascript'),
        ('Frontend', 'frontend');
        ";
        
        $pdo->exec($testData);
        echo "<p>‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</p>";
    }
    
    // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    $pdo->commit();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    echo "<h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:</h3>";
    echo "<ul>";
    
    $stats = [
        'users' => '–ê–≤—Ç–æ—Ä–æ–≤',
        'categories' => '–ö–∞—Ç–µ–≥–æ—Ä–∏–π',
        'tags' => '–¢–µ–≥–æ–≤',
        'articles' => '–°—Ç–∞—Ç–µ–π',
        'article_tags' => '–°–≤—è–∑–µ–π —Å—Ç–∞—Ç—å—è-—Ç–µ–≥'
    ];
    
    foreach ($stats as $table => $label) {
        $stmt = $pdo->query("SELECT COUNT(*) FROM $table");
        $count = $stmt->fetchColumn();
        echo "<li>$label: <strong>$count</strong></li>";
    }
    echo "</ul>";
    
    echo "<p>‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</p>";
    echo "<p>üéâ –¢–µ–ø–µ—Ä—å –≤–∞—à –±–ª–æ–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å MySQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.</p>";
    echo "<p><a href='../index.php'>‚Üê –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–ª–æ–≥—É</a></p>";
    
} catch (Exception $e) {
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if ($pdo && $pdo->inTransaction()) {
        $pdo->rollback();
    }
    
    echo "<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: " . $e->getMessage() . "</p>";
    echo "<p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</p>";
    echo "<ul>";
    echo "<li>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ config/database.php</li>";
    echo "<li>–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 'it_blog'</li>";
    echo "<li>–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏</li>";
    echo "</ul>";
}
?>